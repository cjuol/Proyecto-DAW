<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Configuracion;
use AppBundle\Entity\Materia;
use AppBundle\Entity\Usuario;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\OptimisticLockException;
use Symfony\Component\Config\Definition\Exception\Exception;

/**
 * MateriaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MateriaRepository extends EntityRepository
{


    /**
     * @param Materia $materia
     * @return int
     */
    public function guardarMateria(Materia $materia)
    {
        try {
            $this->_em->persist($materia);
            $this->_em->flush();
            return 1;
        } catch (Exception $e) {
            return 0;
        } catch (OptimisticLockException $e) {
            return 0;
        }
    }

    /**
     * @param Usuario $usuario
     * @return array
     */
    public function encontrarTodasMaterias(Usuario $usuario)
    {
        if ('Admin' == $usuario->getRol()) {
            $resultado = $this->createQueryBuilder('materia')
                ->getQuery()
                ->getResult();
        } else {
            $resultado = $this->createQueryBuilder('materia')
                ->where('materia.departamento = :departamento')
                ->setParameters(array(
                    'departamento' => $usuario->getDepartamento()
                ))
                ->getQuery()
                ->getResult();
        }
        return $resultado;
    }

    /**
     * @param Materia $materia
     * @return int
     */
    public function borrarMateria(Materia $materia)
    {
        try {
            $this->_em->remove($materia);
            $this->_em->flush();
            return 1;
        } catch (Exception $e) {
            return 0;
        } catch (OptimisticLockException $e) {
            return 0;
        }
    }

    /**
     * @param Usuario $usuario
     * @return array|ArrayCollection
     */
    public function encontrarMateriasRestantes(Usuario $usuario)
    {
        $config = $this->_em->getRepository(Configuracion::class)->encontrarConfiguracion();
        $horas = $this->_em->getRepository(Usuario::class)->getHorasAsignadas($usuario);
        $resultado = new ArrayCollection();
        $materias = $this->createQueryBuilder('materia')
            ->where('materia.departamento = :departamento')
            ->setParameters(array(
                'departamento' => $usuario->getDepartamento()
            ))
            ->getQuery()
            ->getResult();
        foreach ($materias as $m) {

            if (!$m->getUsuarioMateria()[0]) {
                if (($horas + $m->getHorasSemanales()) <= $config->getHorasMax()){
                    $resultado[] = $m;
                }

            }
        }

        return $resultado;
    }



    /**
     * @param $m
     * @return mixed
     */
    public function encontrarMateriaNombre($m)
    {
        $resultado = $this->createQueryBuilder('materia')
            ->where('materia.nombre = :materia')
            ->setParameters(array(
                'materia' => $m
            ))
            ->getQuery()
            ->getResult();
        return $resultado[0];

    }

}

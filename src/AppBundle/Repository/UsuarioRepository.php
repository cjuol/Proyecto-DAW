<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Configuracion;
use AppBundle\Entity\Departamento;
use AppBundle\Entity\Usuario;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\OptimisticLockException;
use Symfony\Component\Config\Definition\Exception\Exception;

/**
 * UsuarioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsuarioRepository extends EntityRepository
{

    /**
     * @param Usuario $usuario
     * @return int
     */
    public function guardarUsuario(Usuario $usuario)
    {
        try {
            $this->_em->persist($usuario);
            $this->_em->flush();
            return 1;
        } catch (Exception $e) {
            return 0;
        } catch (OptimisticLockException $e) {
            return 0;
        }
    }

    /**
     * @param Usuario $usuario
     * @return array
     */
    public function encontrarTodosUsuarios(Usuario $usuario)
    {
        if ('Admin' === $usuario->getRol()->getNombre()) {
            $resultado = $this->createQueryBuilder('usuario')
                ->orderBy('usuario.departamento')
                ->addOrderBy('usuario.prioridad', 'ASC')
                ->getQuery()
                ->getResult();
        } else {
            $resultado = $this->createQueryBuilder('usuario')
                ->where('usuario.departamento = :departamento')
                ->orderBy('usuario.prioridad', 'ASC')
                ->setParameters([
                    'departamento' => $usuario->getDepartamento()
                ])
                ->getQuery()
                ->getResult();
        }
        return $resultado;
    }

    public function encontrarTodosUsuariosDepartamento(Usuario $usuario)
    {
        $resultado = $this->createQueryBuilder('usuario')
            ->where('usuario.departamento = :departamento')
            ->orderBy('usuario.prioridad', 'ASC')
            ->setParameters([
                'departamento' => $usuario->getDepartamento()
            ])
            ->getQuery()
            ->getResult();

        return $resultado;
    }

    /**
     * @param Usuario $usuario
     * @return int
     */
    public function borrarUsuario(Usuario $usuario)
    {
        try {
            foreach ($usuario->getUsuarioMateria() as $m) {
                $this->_em->remove($m);
            }
            foreach ($usuario->getExencion() as $ex) {
                $usuario->removeExencion($ex);
            }
            $this->_em->remove($usuario);
            $this->_em->flush();
            return 1;
        } catch (Exception $e) {
            return 0;
        } catch (OptimisticLockException $e) {
            return 0;
        }
    }


    /**
     * @param Usuario $usuario
     * @return array
     */
    public function encontrarPorPrioridad(Usuario $usuario)
    {
        $resultado = $this->createQueryBuilder('usuario')
            ->where('usuario.prioridad = :prioridad OR usuario.prioridad > :prioridad')
            ->andWhere('usuario.departamento = :departamento')
            ->setParameters(array(
                'prioridad'=> $usuario->getPrioridad(),
                'departamento' => $usuario->getDepartamento()
            ))
            ->orderBy('usuario.prioridad', 'ASC')
            ->getQuery()
            ->getResult();
        return $resultado;
    }


    /**
     * @param Usuario $usuario
     * @return float|int
     */
    public function getHorasAsignadas(Usuario $usuario)
    {
        $horasAsignadas = 0;
        foreach ($usuario->getUsuarioMateria() as $um) {
            $horasAsignadas += $um->getMateria()->getHorasSemanales();
        }
        foreach ($usuario->getExencion() as $ex) {
            $horasAsignadas += $ex->getHorasSemanales();
        }
        return $horasAsignadas;
    }

    /**
     * @param Usuario $usuario
     * @return float|int
     */
    public function getPorcentajeMateriasAsignadas(Usuario $usuario)
    {
        $horasAsignadas = 0;
        foreach ($usuario->getUsuarioMateria() as $um) {
            $horasAsignadas += $um->getMateria()->getHorasSemanales();
        }
        return $horasAsignadas;
    }

    /**
     * @param Usuario $usuario
     * @return float|int
     */
    public function getPorcentajeExencionesAsignadas(Usuario $usuario)
    {
        $horasAsignadas = 0;
        foreach ($usuario->getExencion() as $ex) {
            $horasAsignadas += $ex->getHorasSemanales();
        }
        return $horasAsignadas;
    }


    public function encontrarUltimo(Departamento $departamento)
    {
        $resultado = $this->createQueryBuilder('usuario')
            ->where('usuario.departamento = :departamento')
            ->setParameter('departamento', $departamento)
            ->orderBy('usuario.prioridad', 'DESC')
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();
        return $resultado[0];
    }

    /**
     * @param String $hash
     * @return array
     */
    public function encontrarHash(String $hash)
    {
        $resultado = $this->createQueryBuilder('usuario')
            ->where('usuario.hash = :hash')
            ->andWhere('usuario.isHashActive = :active')
            ->setParameter('hash', $hash)
            ->setParameter('active', true)
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();
        $resultado = ($resultado != null) ? $resultado[0] : null;
        return $resultado;
    }
}

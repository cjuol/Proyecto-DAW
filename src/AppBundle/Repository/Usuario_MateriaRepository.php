<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Configuracion;
use AppBundle\Entity\Materia;
use AppBundle\Entity\Usuario;
use AppBundle\Entity\Usuario_Materia;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\OptimisticLockException;
use Symfony\Component\Config\Definition\Exception\Exception;

/**
 * Usuario_MateriaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Usuario_MateriaRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param Usuario_Materia $usuario_Materia
     * @return int
     */
    public function guardarUsuarioMateria(Usuario_Materia $usuario_Materia)
    {
        try {
            $this->_em->persist($usuario_Materia);
            $this->_em->flush();
            return 1;
        } catch (Exception $e) {
            return 0;
        } catch (OptimisticLockException $e) {
            return 0;
        }
    }

    /**
     * @param Usuario $usuario
     * @return array
     */
    public function encontrarTodosUsuarioMateria(Usuario $usuario)
    {
//        if ('Admin' === $usuario->getRol()) {
            $resultado = $this->createQueryBuilder('usuario_materia')
                ->getQuery()
                ->getResult();
//        }
//        else {
//            $resultado = $this->createQueryBuilder('usuario_materia')
//                ->where('usuario_materia.usuario.departamento = :departamento')
//                ->setParameters([
//                    'departamento' => $usuario->getDepartamento()
//                ])
//                ->getQuery()
//                ->getResult();
//        }
//        else {
//            $resultado = $this->createQueryBuilder('usuario_materia')
//                ->where('usuario_materia.usuario = :usuario')
//                ->setParameters([
//                    'usuario' => $usuario
//                ])
//                ->getQuery()
//                ->getResult();
//        }
        return $resultado;
    }

    /**
     * @param Usuario_Materia $usuario_Materia
     * @return int
     */
    public function borrarUsuarioMateria(Usuario_Materia $usuario_Materia)
    {
        try {
            $this->_em->remove($usuario_Materia);
            $this->_em->flush();
            return 1;
        } catch (Exception $e) {
            return 0;
        } catch (OptimisticLockException $e) {
            return 0;
        }
    }

    public function encontrarUltima(Usuario $usuario ,Configuracion $configuracion){
        $um = $this->createQueryBuilder('usuario_materia')
            ->where('usuario_materia.curso = :curso')
            ->andWhere('usuario_materia.usuario = :usuario')
            ->setParameters([
                'curso' => $configuracion->getCurso(),
                'usuario' => $usuario->getId()
            ])
            ->orderBy('usuario_materia.turno', 'ASC')
            ->getQuery()
            ->getResult();

        $resultado = ($um != null) ? $um : null;
        return $resultado;
    }

    public function encontrarUsuarioMateria(Usuario $usuario, Materia $materia)
    {
        $configuracion = $this->_em->getRepository(Configuracion::class)->encontrarConfiguracion();
        $um = $this->createQueryBuilder('usuario_materia')
            ->where('usuario_materia.usuario = :usuario')
            ->andWhere('usuario_materia.materia = :materia')
            ->andWhere('usuario_materia.curso = :curso')
            ->setParameters([
                'usuario' => $usuario->getId(),
                'materia' => $materia->getId(),
                'curso' => $configuracion->getCurso()
            ])
            ->getQuery()
            ->getResult();
        $resultado = ($um != null) ? $um : null;
        return $resultado[0];
    }

    public function encontrarPorCursoYDepartamento(Usuario $usuario ,Configuracion $configuracion){
        $resultado = new ArrayCollection();
        $turno = 0;
        $ultima = $this->encontrarUltima($usuario, $configuracion);
        $c = $this->_em->getRepository(Usuario::class)->encontrarUltimo($usuario->getDepartamento());
        $c = $c->getPrioridad();
        if ($ultima === null){
            $turno = $usuario->getPrioridad();
        }else{
            for ($k = 0; $k < count($ultima); $k++) {
                if (($ultima[$k]->getTurno() != ($usuario->getPrioridad() + ($k * $c)))) {
                    $turno = $usuario->getPrioridad() + ($k * $c);
                    break;
                }
            }
            if ($turno === 0) {
                $turno = $usuario->getPrioridad() + (count($ultima) * $c);
            }

        }
        $um = $this->createQueryBuilder('usuario_materia')
            ->where('usuario_materia.curso = :curso')
            ->andWhere('usuario_materia.usuario != :usuario')
            ->orderBy('usuario_materia.turno', 'ASC')
            ->setParameters([
                'usuario' => $usuario->getId(),
                'curso' => $configuracion->getCurso()])
            ->getQuery()
            ->getResult();
        foreach ($um as $item){
            if ($item->getMateria()->getDepartamento()->getId() == $usuario->getDepartamento()->getId()){
                if ($item->getTurno() > $turno) {
                    $resultado[] = $item;
                }

            }
        }
        return $resultado;
    }


    public function encontrarPrioridad(Usuario $usuario , int $prioridad, Configuracion $configuracion){
        $um = $this->createQueryBuilder('usuario_materia')
            ->where('usuario_materia.usuario = :usuario')
            ->andWhere('usuario_materia.turno = :turno')
            ->andWhere('usuario_materia.curso = :curso')
            ->setParameters([
                'curso' => $configuracion->getCurso(),
                'usuario' => $usuario->getId(),
                'turno' => $prioridad
            ])
            ->orderBy('usuario_materia.turno', 'DESC')
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();

        $resultado = ($um != null) ? $um[0] : null;
        return $resultado;
    }
}
